// Generated by gencpp from file extract_pose_service/object_and_target_positionResponse.msg
// DO NOT EDIT!


#ifndef EXTRACT_POSE_SERVICE_MESSAGE_OBJECT_AND_TARGET_POSITIONRESPONSE_H
#define EXTRACT_POSE_SERVICE_MESSAGE_OBJECT_AND_TARGET_POSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace extract_pose_service
{
template <class ContainerAllocator>
struct object_and_target_positionResponse_
{
  typedef object_and_target_positionResponse_<ContainerAllocator> Type;

  object_and_target_positionResponse_()
    : object_position()
    , target_position()
    , is_no_obj(false)
    , yaw_ang(0.0)  {
    }
  object_and_target_positionResponse_(const ContainerAllocator& _alloc)
    : object_position(_alloc)
    , target_position(_alloc)
    , is_no_obj(false)
    , yaw_ang(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _object_position_type;
  _object_position_type object_position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_position_type;
  _target_position_type target_position;

   typedef uint8_t _is_no_obj_type;
  _is_no_obj_type is_no_obj;

   typedef double _yaw_ang_type;
  _yaw_ang_type yaw_ang;





  typedef boost::shared_ptr< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct object_and_target_positionResponse_

typedef ::extract_pose_service::object_and_target_positionResponse_<std::allocator<void> > object_and_target_positionResponse;

typedef boost::shared_ptr< ::extract_pose_service::object_and_target_positionResponse > object_and_target_positionResponsePtr;
typedef boost::shared_ptr< ::extract_pose_service::object_and_target_positionResponse const> object_and_target_positionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator1> & lhs, const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.object_position == rhs.object_position &&
    lhs.target_position == rhs.target_position &&
    lhs.is_no_obj == rhs.is_no_obj &&
    lhs.yaw_ang == rhs.yaw_ang;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator1> & lhs, const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace extract_pose_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d051dd672e8e1f075426d8f6143b08a6";
  }

  static const char* value(const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd051dd672e8e1f07ULL;
  static const uint64_t static_value2 = 0x5426d8f6143b08a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "extract_pose_service/object_and_target_positionResponse";
  }

  static const char* value(const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point object_position\n"
"geometry_msgs/Point target_position\n"
"bool is_no_obj\n"
"float64 yaw_ang\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_position);
      stream.next(m.target_position);
      stream.next(m.is_no_obj);
      stream.next(m.yaw_ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_and_target_positionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::extract_pose_service::object_and_target_positionResponse_<ContainerAllocator>& v)
  {
    s << indent << "object_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.object_position);
    s << indent << "target_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target_position);
    s << indent << "is_no_obj: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_no_obj);
    s << indent << "yaw_ang: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXTRACT_POSE_SERVICE_MESSAGE_OBJECT_AND_TARGET_POSITIONRESPONSE_H
