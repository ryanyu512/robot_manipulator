# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from extract_pose_service/object_and_target_positionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class object_and_target_positionRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "extract_pose_service/object_and_target_positionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_and_target_positionRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from extract_pose_service/object_and_target_positionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class object_and_target_positionResponse(genpy.Message):
  _md5sum = "d051dd672e8e1f075426d8f6143b08a6"
  _type = "extract_pose_service/object_and_target_positionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point object_position
geometry_msgs/Point target_position
bool is_no_obj
float64 yaw_ang

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['object_position','target_position','is_no_obj','yaw_ang']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       object_position,target_position,is_no_obj,yaw_ang

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(object_and_target_positionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.object_position is None:
        self.object_position = geometry_msgs.msg.Point()
      if self.target_position is None:
        self.target_position = geometry_msgs.msg.Point()
      if self.is_no_obj is None:
        self.is_no_obj = False
      if self.yaw_ang is None:
        self.yaw_ang = 0.
    else:
      self.object_position = geometry_msgs.msg.Point()
      self.target_position = geometry_msgs.msg.Point()
      self.is_no_obj = False
      self.yaw_ang = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6dBd().pack(_x.object_position.x, _x.object_position.y, _x.object_position.z, _x.target_position.x, _x.target_position.y, _x.target_position.z, _x.is_no_obj, _x.yaw_ang))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object_position is None:
        self.object_position = geometry_msgs.msg.Point()
      if self.target_position is None:
        self.target_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.object_position.x, _x.object_position.y, _x.object_position.z, _x.target_position.x, _x.target_position.y, _x.target_position.z, _x.is_no_obj, _x.yaw_ang,) = _get_struct_6dBd().unpack(str[start:end])
      self.is_no_obj = bool(self.is_no_obj)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6dBd().pack(_x.object_position.x, _x.object_position.y, _x.object_position.z, _x.target_position.x, _x.target_position.y, _x.target_position.z, _x.is_no_obj, _x.yaw_ang))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.object_position is None:
        self.object_position = geometry_msgs.msg.Point()
      if self.target_position is None:
        self.target_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 57
      (_x.object_position.x, _x.object_position.y, _x.object_position.z, _x.target_position.x, _x.target_position.y, _x.target_position.z, _x.is_no_obj, _x.yaw_ang,) = _get_struct_6dBd().unpack(str[start:end])
      self.is_no_obj = bool(self.is_no_obj)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6dBd = None
def _get_struct_6dBd():
    global _struct_6dBd
    if _struct_6dBd is None:
        _struct_6dBd = struct.Struct("<6dBd")
    return _struct_6dBd
class object_and_target_position(object):
  _type          = 'extract_pose_service/object_and_target_position'
  _md5sum = 'd051dd672e8e1f075426d8f6143b08a6'
  _request_class  = object_and_target_positionRequest
  _response_class = object_and_target_positionResponse
